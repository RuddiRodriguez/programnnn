function [pic,info,err,dd]=xfillspheres(ids,radii,options)
%----------------------------------------------------------------------------
% function [pic,dist,err]=xfillspheres(ids,radii,options)
%----------------------------------------------------------------------------
% Generate an image of Gaussian distributed spheres.
% The Gaussian distribution:
% The images is generated by first placing the larger (according
% to the distribution) spheres followed by the next largest etc.
%----------------------------------------------------------------------------
% Input:
%   ids:        Indices given to the file names, if a vector, then N images
%               is generated, where N is the length of ids.
%   radii:      Vector containing the radii
%   options:    [image size ({256}), save image ({0}/1)]
%               The file name is defined by the radii.
% Output:
%   pic:    The image
%   info:   Structured array with the distribution (digitalized)
%           info.dist:      is the distribution
%           info.centers:   contains the centers and radii [x y R]
%   err:    There is no possible errors
%-----------------------------------------------------------------------------
% Example:
%   
%
test=0;
err=0;
radiin=radii;
dd=[];
warning off all
pidiv2=pi/2;
pi2=pi*2;
for id=ids
    if id<10
        qq='00';
    end
    if id<100 && id>9
        qq='0';    
    end
    if id==100
        qq='';
    end    
    if nargin==2
        N=256;    
        saveim=0;
    else
        N=options(1);
        saveim=options(2);
    end
    pic=zeros(1,N^2);    
    picc=ones(1,N^2);    
    sr=size(radiin,2);
    rt=[];
    for ss=1:sr
        rt=[rt num2str(radiin(ss)) '_'];
    end
    name=['fs_'  rt qq num2str(id)]
    dist=[];
    cand=pic==0;
    cand=find(cand);
    radii=radii(find(radii>0));
    for R=radii
        centers=[];
        R
        h=0;
        pause(2)
        %        cand=find((pic==0).*picc);
        picc=(pic==0);
        picc=reshape(picc,N,N);
        picc(1:R,:)=0;
        picc(end-R:end,:)=0;
        picc(:,1:R)=0;
        picc(:,end-R:end)=0;
        picc=reshape(picc,1,N^2);        
        cand=find(picc);
        dphi=1/R;
        dphi2=dphi/2;
        phi=0:dphi:pi2;
        phi2=0:dphi2:pi2;
        Rsinphi=R*sin(phi);
        Rcosphi=R*cos(phi);
        R2sinphi=2*R*sin(phi2);
        R2cosphi=2*R*cos(phi2);
        tphi=0:dphi:pi2;
        Rdsintphi=(R-1)*sin(tphi);
        Rdcostphi=(R-1)*cos(tphi);
        Rsintphi=R*sin(tphi);
        Rcostphi=R*cos(tphi);
        maxpix=(2*R)^2-pi*R^2;
        while size(cand,2)>2
            cand=find((pic==0).*picc);            
            %cand=find(picc);            
            scand=size(cand,2);
%            if scand<30000 && R==10
%                disp('fff')    
%                
%            end
            %            pause(0.01)
            if scand>1
                pos=ceil(rand*scand);
                y=ceil(cand(pos)/N);
                x=round(cand(pos)-(y-1)*N);
                picc(1,cand(pos))=0;                
                collision=0;
                n=1;
                %                pic0=pic;
                colli=0;
                xx=x;
                yy=y;
                if pic(xx+(yy-1)*N)==0                    
                    gody=1;
                else
                    disp('fffffffffffffffffffffffff');
                    pause(1)
                    gody=0;
                end
                if gody==1                
                    xx=round(x+Rdsintphi);
                    yy=round(y+Rdcostphi);            
                    if all(xx>0) && all(yy>0) && all(xx<=N) && all(yy<=N)
                        if any(pic(xx+(yy-1)*N)>0)
                            colli=1;                           
                            if all(diff(radii)<0)
                                theta=0;
                                while theta<=pidiv2
                                    xx=round(x+Rdsintphi*sin(theta));
                                    yy=round(y+Rdcostphi*sin(theta));            
                                    ixx=(xx>0).*(xx<=N);
                                    ixy=(yy>0).*(yy<=N);
                                    ix=find(ixy.*ixx);
                                    picc(xx(ix)+(yy(ix)-1)*N)=0;                            
                                    theta=theta+dphi;
                                end %theta           
                            end
                        end
                    else
                        colli=1;
                    end                    
                    if colli==0            
                        theta=0;
                        centers=[centers; x y R];
                        while theta<=pidiv2
                            xx=round(x+Rsinphi*sin(theta));
                            yy=round(y+Rcosphi*sin(theta));            
                            zz=round(255*cos(theta));
                            pic(xx+(yy-1)*N)=zz;                            
                            picc(xx+(yy-1)*N)=0;   
                            theta=theta+dphi;
                        end %theta                                    
                        theta=0;
                        while theta<=pidiv2
                            xx=round(x+R2sinphi*sin(theta));
                            yy=round(y+R2cosphi*sin(theta));            
                            ixx=(xx>0).*(xx<=N);
                            ixy=(yy>0).*(yy<=N);
                            ix=find(ixy.*ixx);
                            picc(xx(ix)+(yy(ix)-1)*N)=0;                            
                            theta=theta+dphi2;
                        end %theta                                                            
                        h=h+1;                               
                    end % if colli                            
                end
            end
        end
        dist=[dist; h R ];
    end
    dd=[dd dist];
    info.centers=centers;
    info.dist=dist;
    pic=reshape(pic,N,N);
    pic=uint8(pic);
    if saveim==1
        imwrite(pic,[name '.tif'],'tif');
        name
        save([name '.mat'],'info');
    end
end

